#ifdef    SPMD
C                           DISCLAIMER
C
C   This file was generated by TAF version 1.6.1
C
C   FASTOPT DISCLAIMS  ALL  WARRANTIES,  EXPRESS  OR  IMPLIED,
C   INCLUDING (WITHOUT LIMITATION) ALL IMPLIED  WARRANTIES  OF
C   MERCHANTABILITY  OR FITNESS FOR A PARTICULAR PURPOSE, WITH
C   RESPECT TO THE SOFTWARE AND USER PROGRAMS.   IN  NO  EVENT
C   SHALL  FASTOPT BE LIABLE FOR ANY LOST OR ANTICIPATED PROF-
C   ITS, OR ANY INDIRECT, INCIDENTAL, EXEMPLARY,  SPECIAL,  OR
C   CONSEQUENTIAL  DAMAGES, WHETHER OR NOT FASTOPT WAS ADVISED
C   OF THE POSSIBILITY OF SUCH DAMAGES.
C
C                           Haftungsbeschraenkung
C   FastOpt gibt ausdruecklich keine Gewaehr, explizit oder indirekt,
C   bezueglich der Brauchbarkeit  der Software  fuer einen bestimmten
C   Zweck.   Unter  keinen  Umstaenden   ist  FastOpt   haftbar  fuer
C   irgendeinen Verlust oder nicht eintretenden erwarteten Gewinn und
C   allen indirekten,  zufaelligen,  exemplarischen  oder  speziellen
C   Schaeden  oder  Folgeschaeden  unabhaengig  von einer eventuellen
C   Mitteilung darueber an FastOpt.
!
!   !REVISION HISTORY:
!
!    25Sep2007 Todling  Add trajectory recall; various adaptations
!                       and testing 
C
      module     stepon_do_tad_store
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.6.1   **
C******************************************************************
C******************************************************************
C==============================================
C referencing used modules
C==============================================
      use precision, only : r8

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none


C==============================================
C declare local variables
C==============================================
      real, allocatable :: inner_omega_8h(:)
      real(kind=r8), allocatable :: inner_pe_14h(:,:,:,:)
      integer :: inner_stepon_do

      end module     stepon_do_tad_store


      module     stepon_tad
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.6.1   **
C******************************************************************
C******************************************************************
C==============================================
C referencing used modules
C==============================================
      use precision
      use prognostics
      use prognostics_q
      use mod_comm, only : gid,mp_exit, mp_init, y_decomp
      use m_strtemplate
      use m_iostate, only : getstate
      use timingmodule, only : timing_init, timing_off, timing_on
      use stepon

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

      contains
      subroutine stepon_do_tad ( prog, xpertq, ypertq )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.6.1   **
C******************************************************************
C******************************************************************
C==============================================
C referencing used modules
C==============================================
      use mod_comm, only : numcpu
      use fvcore, only : ns,fvcore_do
      use fvcore, only : fvcore_tape_rec
      use fvcore, only : dynpkg_n2,dynpkg_nsplit
      use fvcore, only : ng_c
      use hswf, only : hswf_do
      use stepon_do_tad_store, only : inner_omega_8h,inner_pe_14h,inner_stepon_do
      use fvcore_tad, only : fvcore_do_tad
      use m_iostate, only : getstate
      use mapz_module, only : te_map

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

      type(dyn_prog) :: prog
      type(dynq)     :: xpertq
      type(dynq)     :: ypertq
      real(kind=r8), pointer :: q_tad(:,:,:,:)

C==============================================
C declare local variables
C==============================================
      real(kind=r8) :: ae
      real(kind=r8) :: te0
      integer :: iinner
      integer :: iouter
      integer :: nx
      logical :: doremap
      real(kind=r8) :: om

! Set pointers
! ------------
       u   => prog%u
       v   => prog%v
      pt   => prog%pt
      delp => prog%delp
      q    => prog%q

      q_tad => ypertq%q

      if ( (jlast-jfirst+1)/numcpu >= 4 ) then
          nx = 1
      else
          nx = 4
      endif

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call adtiming_off( 'STPAD' )
      do iinner = ninner, 1, -1
         nstep = iinner-1+(iouter-1)*ninner
         fvcore_tape_rec = iinner-1+stepon_tape_rec*mstep
         call getstate( nymd, nhms, prog, doremap )
         if (doremap) then
             te0 = 1.0
             call te_map(.false., .false., ps, omga, pe, delp, pkz, pk, mpdt,
     &                    imr, jnp, nl, nx, jfirst, jlast, nq,  u,  v,
     &                    pt, q, phis,  cpair, cappa, kord, peln, te0,
     &                    ng_d, ng_s, 0 )
         endif
         omega = inner_omega_8h(fvcore_tape_rec+1)
         om = omega
         ae = rearth
         nstep = nstep+1
         if (aoa) then
           pe = inner_pe_14h(:,:,:,fvcore_tape_rec+1)
           model_time = nstep*pdt
           call age_of_air_tad( imr,nl,jfirst,jlast,ng_d,model_time,pe,q_tad(1,jfirst-ng_d,1,nq) )
         endif
         call fvcore_do_tad( imr,jnp,nl,nc,jfirst,jlast,ng_d,ng_s,nq,ps,pe,u,v,pt,q,q_tad,pkz,phis,ptop,om,ae,iord,jord,kord,umax,
     $consv )

         call tick( nymd,nhms,-pdt )
      end do ! < iinner >
      call adtiming_on( 'STPAD' )

      xpertq%q = q_tad

      end subroutine stepon_do_tad


      subroutine stepon_domd ( first, prog )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.6.1   **
C******************************************************************
C******************************************************************
C==============================================
C referencing used modules
C==============================================
      use mod_comm, only : numcpu
      use fvcore, only : ns,fvcore_do
      use fvcore, only : fvcore_tape_rec
      use fvcore, only : dynpkg_n2,dynpkg_nsplit
      use fvcore, only : ng_c
      use hswf, only : hswf_do
      use stepon_do_tad_store, only : inner_omega_8h,inner_pe_14h,inner_stepon_do
      use fvcore_tad, only : fvcore_domd
      use m_iostate, only : getstate
      use mapz_module, only : te_map
      use prognostics

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

      logical, intent(in) :: first
      type(dyn_prog) prog
      
C==============================================
C declare local variables
C==============================================
      real(kind=r8) :: ae
      real(kind=r8) :: akap
      real(kind=r8) :: cp
      real(kind=r8) :: grav
      real(kind=r8) :: te0
      integer :: iinner
      integer :: iouter
      integer :: nx
      real(kind=r8) :: om
      real(kind=r8) :: rg
      logical       :: doremap
      
C**********************************************
C executable statements of routine
C**********************************************

! Set pointers
! ------------
       u   => prog%u
       v   => prog%v
      pt   => prog%pt
      delp => prog%delp
      q    => prog%q

      if ( (jlast-jfirst+1)/numcpu >= 4 ) then
          nx = 1
      else
          nx = 4
      endif

      do iinner = 1, ninner
         nstep = iinner-1+(iouter-1)*ninner
         fvcore_tape_rec = iinner-1+stepon_tape_rec*mstep
         if ( .not. allocated(inner_omega_8h)) then
           allocate( inner_omega_8h(inner_stepon_do) )
         endif
         call getstate( nymd, nhms, prog, doremap )
         if (doremap) then
             te0 = 1.0
             call te_map(.false., .false., ps, omga, pe, delp, pkz, pk, mpdt,
     &                    imr, jnp, nl, nx, jfirst, jlast, nq,  u,  v,
     &                    pt, q, phis,  cpair, cappa, kord, peln, te0,
     &                    ng_d, ng_s, 0 )
         endif
         inner_omega_8h(fvcore_tape_rec+1) = omega
         om = omega
         cp = cpair
         rg = rair
         ae = rearth
         if(first)
     &   call fvcore_domd( imr,jnp,nl,nc,jfirst,jlast,ng_d,ng_s,nq,ps,pe,delp,u,v,pt,q,pk,pkz,phis,nsplit,pdt,ptop,om,cp,rg,ae,iord,
     $jord,kord,umax,omga,peln,consv,convt )
         nstep = nstep+1
         call tick( nymd,nhms,pdt )
         mcsec = nsecf(nhms)
         if (force_dycore) then
           rg = rair
           akap = cappa
           if(first)
     &     call hswf_do( imr,jnp,nl,jfirst,jlast,u,v,pt,pe,pkz,pdt,akap,grav,rg,dcaf,.true.,rayf,sinp,cosp,sine,cose,coslon,sinlon,
     $ng_s,ng_d )
         endif
         if (aoa) then
           if ( .not. allocated(inner_pe_14h)) then
             allocate( inner_pe_14h(1:size(pe,1),1:size(pe,2),1:size(pe,3),inner_stepon_do) )
           endif
           inner_pe_14h(:,:,:,fvcore_tape_rec+1) = pe
           model_time = nstep*pdt
           if(first)
     &     call age_of_air( imr,jnp,nl,jfirst,jlast,ng_d,model_time,pe,q(1,jfirst-ng_d,1,nq) )
         endif
      enddo ! < inner >
      if (aoa) then
        model_time = nstep*pdt
      endif

      end subroutine stepon_domd


      end module     stepon_tad


#else  /* SPMD */
C                           DISCLAIMER
C
C   This file was generated by TAF version 1.6.1
C
C   FASTOPT DISCLAIMS  ALL  WARRANTIES,  EXPRESS  OR  IMPLIED,
C   INCLUDING (WITHOUT LIMITATION) ALL IMPLIED  WARRANTIES  OF
C   MERCHANTABILITY  OR FITNESS FOR A PARTICULAR PURPOSE, WITH
C   RESPECT TO THE SOFTWARE AND USER PROGRAMS.   IN  NO  EVENT
C   SHALL  FASTOPT BE LIABLE FOR ANY LOST OR ANTICIPATED PROF-
C   ITS, OR ANY INDIRECT, INCIDENTAL, EXEMPLARY,  SPECIAL,  OR
C   CONSEQUENTIAL  DAMAGES, WHETHER OR NOT FASTOPT WAS ADVISED
C   OF THE POSSIBILITY OF SUCH DAMAGES.
C
C                           Haftungsbeschraenkung
C   FastOpt gibt ausdruecklich keine Gewaehr, explizit oder indirekt,
C   bezueglich der Brauchbarkeit  der Software  fuer einen bestimmten
C   Zweck.   Unter  keinen  Umstaenden   ist  FastOpt   haftbar  fuer
C   irgendeinen Verlust oder nicht eintretenden erwarteten Gewinn und
C   allen indirekten,  zufaelligen,  exemplarischen  oder  speziellen
C   Schaeden  oder  Folgeschaeden  unabhaengig  von einer eventuellen
C   Mitteilung darueber an FastOpt.
C
      module     stepon_do_tad_store
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.6.1   **
C******************************************************************
C******************************************************************
C==============================================
C referencing used modules
C==============================================
      use precision, only : r8

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare local variables
C==============================================
      real, allocatable :: inner_omega_8h(:)
      real(kind=r8), allocatable :: inner_pe_14h(:,:,:,:)
      integer :: inner_stepon_do

      end module     stepon_do_tad_store


      module     stepon_tad
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.6.1   **
C******************************************************************
C******************************************************************
C==============================================
C referencing used modules
C==============================================
      use precision
      use prognostics
      use prognostics_tad
      use reference
      use m_strtemplate
#ifdef TIMING
      use timingmodule, only : timing_init, timing_off, timing_on
#endif
      use stepon

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

      contains
      subroutine stepon_do_tad
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.6.1   **
C******************************************************************
C******************************************************************
C==============================================
C referencing used modules
C==============================================
      use fvcore, only : ns,fvcore_do
      use fvcore, only : fvcore_tape_rec
      use fvcore, only : dynpkg_n2,dynpkg_nsplit
      use fvcore, only : ng_c
      use hswf, only : hswf_do
      use stepon_do_tad_store, only : inner_omega_8h,inner_pe_14h,inner_stepon_do
      use fvcore_tad, only : fvcore_do_tad
      use m_iostate, only : getstate
      use mapz_module, only : te_map

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare local variables
C==============================================
      real(kind=r8) :: ae
      integer :: iinner
      integer :: iouter
      real(kind=r8) :: om
      real(kind=r8) :: te0
      integer :: nhms_trj
      integer :: nymd_trj
      integer :: ierr
      integer :: rmaptfrq
      integer :: nx
      character*255 :: fnametrj

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      iouter = 1
#ifdef TIMING
      call adtiming_off( 'STPAD' )
#endif
      nymd_trj = nymd
      nhms_trj = nhms
      do iinner = ninner, 1, -1

        if (trajfrq>0) then
          strajfrq = nsecf(trajfrq)
          snhms    = nsecf(nhms_trj)
          if (mod(snhms,strajfrq)==0) then
            call strTemplate( fnametrj, trajtmpl,
     &                        xid=trim(job), nymd=nymd_trj, nhms=nhms_trj )
            call getstate(  .true. ,fnametrj,job,nymd_trj,nhms_trj,ptop,ks,stat=ierr )
                                                                                                                       
            rmaptfrq = nsecf(rmaptrj)
            if (mod(snhms,rmaptfrq)==0) then
              nx = 4
              te0 = 1.0
              call te_map(.false., .false., ps, omga, pe, delp, pkz, pk, mpdt,
     &                     imr, jnp, nl, nx, jfirst, jlast, nq,  u,  v,
     &                     pt, q, phis,  cpair, cappa, kord, peln, te0,
     &                     ng_d, ng_s, 0 )
            endif
          endif
        endif

        nstep = iinner-1+(iouter-1)*ninner
        fvcore_tape_rec = iinner-1+stepon_tape_rec*mstep
        omega = inner_omega_8h(fvcore_tape_rec+1)
        om = omega
        ae = rearth
        nstep = nstep+1
        if (aoa) then
          pe = inner_pe_14h(:,:,:,fvcore_tape_rec+1)
          model_time = nstep*pdt
          call age_of_air_tad( imr,nl,jfirst,jlast,ng_d,model_time,pe,q_tad(1,jfirst-ng_d,1,nq) )
        endif
#ifdef TIMING
        call adtiming_off( 'FVCORE' )
#endif
        call fvcore_do_tad( imr,jnp,nl,nc,jfirst,jlast,ng_d,ng_s,nq,ps,pe,u,v,pt,q,q_tad,pkz,phis,ptop,om,ae,iord,jord,kord,umax,
     $consv )
#ifdef TIMING
        call adtiming_on( 'FVCORE' )
#endif

        call tick( nymd_trj,nhms_trj,-pdt )
      end do

      end subroutine stepon_do_tad


      subroutine stepon_domd
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.6.1   **
C******************************************************************
C******************************************************************
C==============================================
C referencing used modules
C==============================================
      use fvcore, only : ns,fvcore_do
      use fvcore, only : fvcore_tape_rec
      use fvcore, only : dynpkg_n2,dynpkg_nsplit
      use fvcore, only : ng_c
      use hswf, only : hswf_do
      use stepon_do_tad_store, only : inner_omega_8h,inner_pe_14h,inner_stepon_do
      use fvcore_tad, only : fvcore_domd

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare local variables
C==============================================
      real(kind=r8) :: ae
      real(kind=r8) :: akap
      real(kind=r8) :: cp
      real(kind=r8) :: grav
      integer :: iinner
      integer :: iouter
      real(kind=r8) :: om
      real(kind=r8) :: rg

C**********************************************
C executable statements of routine
C**********************************************
      iouter = 1
      do iinner = 1, ninner
        nstep = iinner-1+(iouter-1)*ninner
        fvcore_tape_rec = iinner-1+stepon_tape_rec*mstep
        if ( .not. allocated(inner_omega_8h)) then
          allocate( inner_omega_8h(inner_stepon_do) )
        endif
        inner_omega_8h(fvcore_tape_rec+1) = omega
        om = omega
        cp = cpair
        rg = rair
        ae = rearth
        call fvcore_domd( imr,jnp,nl,nc,jfirst,jlast,ng_d,ng_s,nq,ps,pe,delp,u,v,pt,q,pk,pkz,phis,nsplit,pdt,ptop,om,cp,rg,ae,iord,
     $jord,kord,umax,omga,peln,consv,convt )
        nstep = nstep+1
        call tick( nymd,nhms,pdt )
        mcsec = nsecf(nhms)
        if (force_dycore) then
          rg = rair
          akap = cappa
          call hswf_do( imr,jnp,nl,jfirst,jlast,u,v,pt,pe,pkz,pdt,akap,grav,rg,dcaf, .true. ,rayf,sinp,cosp,sine,cose,coslon,sinlon,
     $ng_s,ng_d )
        endif
        if (aoa) then
          if ( .not. allocated(inner_pe_14h)) then
            allocate( inner_pe_14h(1:size(pe,1),1:size(pe,2),1:size(pe,3),inner_stepon_do) )
          endif
          inner_pe_14h(:,:,:,fvcore_tape_rec+1) = pe
          model_time = nstep*pdt
          call age_of_air( imr,jnp,nl,jfirst,jlast,ng_d,model_time,pe,q(1,jfirst-ng_d,1,nq) )
        endif
      end do
      if (aoa) then
        model_time = nstep*pdt
      endif
      end subroutine stepon_domd


      subroutine stepon_set_tad
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.6.1   **
C******************************************************************
C******************************************************************
C==============================================
C referencing used modules
C==============================================
      use prognostics_tad, only : q_tad

C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C----------------------------------------------
C RESET MODULE ADJOINT VARIABLES
C----------------------------------------------
      q_tad(:,:,:,:) = 0.

      end subroutine stepon_set_tad


      end module     stepon_tad


#endif /* SPMD */
